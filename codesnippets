/student-rest-service
|-- /src
|   |-- /main
|       |-- /java
|           |-- /com/example/student
|               |-- Student.java
|               |-- StudentResource.java
|       |-- /resources
|           |-- META-INF/microprofile-config.properties
|-- /test
|   |-- /java
|       |-- /com/example/student
|           |-- StudentResourceParameterizedTest.java
|-- /features
|   |-- student-parameterized.feature
|-- pom.xml




Feature: Student API with parameterized tests

  Scenario Outline: Fetch individual student
    Given The student API is available
    When I request the student with ID <id>
    Then The student's name should be <name>

    Examples:
      | id | name  |
      | 1  | Alice |
      | 2  | Bob   |




package com.example.student;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.jupiter.api.Assertions;

import java.util.Optional;

public class StudentResourceParameterizedTest {

    private StudentResource studentResource;
    private Student student;

    @Given("The student API is available")
    public void theStudentApiIsAvailable() {
        studentResource = new StudentResource(); // Set up the resource
    }

    @When("I request the student with ID {int}")
    public void iRequestTheStudentWithId(int id) {
        Optional<Student> foundStudent = studentResource.getStudents().stream()
                .filter(s -> s.getId().equals(String.valueOf(id)))
                .findFirst();
        student = foundStudent.orElse(null); // Find student by ID
    }

    @Then("The student's name should be {string}")
    public void theStudentSNameShouldBe(String name) {
        Assertions.assertNotNull(student, "Student not found");
        Assertions.assertEquals(name, student.getName());
    }
}




package com.example.student;

public class Student {
    private String id;
    private String name;

    public Student(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

package com.example.student;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import java.util.Arrays;
import java.util.List;

@Path("/students")
public class StudentResource {

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public List<Student> getStudents() {
        return Arrays.asList(new Student("1", "Alice"), new Student("2", "Bob"));
    }
}






--------------------Mock---------------




/student-rest-service
|-- /src
|   |-- /main
|       |-- /java
|           |-- /com/example/student
|               |-- Student.java
|-- /test
|   |-- /java
|       |-- /com/example/student
|           |-- StudentResourceMockTest.java
|-- /features
|   |-- student-parameterized.feature
|-- pom.xml




<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>student-rest-service</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <dependencies>
        <!-- MicroProfile Dependency -->
        <dependency>
            <groupId>org.eclipse.microprofile</groupId>
            <artifactId>microprofile-rest-client</artifactId>
            <version>4.0</version>
        </dependency>

        <!-- JUnit 5 Dependency -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>

        <!-- Cucumber Dependencies -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>7.14.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit-platform-engine</artifactId>
            <version>7.14.0</version>
            <scope>test</scope>
        </dependency>

        <!-- Mockito for Mocking -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>5.0.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M5</version>
            </plugin>
        </plugins>
    </build>
</project>





package com.example.student;

import io.cucumber.java.Before;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.jupiter.api.Assertions;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.mockito.Mockito.when;

public class StudentResourceMockTest {

    @Mock
    private StudentResource studentResource; // Mock the StudentResource

    private Student student;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this); // Initialize the mocks
    }

    @Given("The student API is available")
    public void theStudentApiIsAvailable() {
        List<Student> mockStudents = Arrays.asList(
                new Student("1", "Alice"),
                new Student("2", "Bob")
        );
        when(studentResource.getStudents()).thenReturn(mockStudents); // Mock the getStudents call
    }

    @When("I request the student with ID {int}")
    public void iRequestTheStudentWithId(int id) {
        Optional<Student> foundStudent = studentResource.getStudents().stream()
                .filter(s -> s.getId().equals(String.valueOf(id)))
                .findFirst();
        student = foundStudent.orElse(null);
    }

    @Then("The student's name should be {string}")
    public void theStudentSNameShouldBe(String name) {
        Assertions.assertNotNull(student, "Student not found");
        Assertions.assertEquals(name, student.getName());
    }
}





Feature: Student API with parameterized tests

  Scenario Outline: Fetch individual student
    Given The student API is available
    When I request the student with ID <id>
    Then The student's name should be <name>

    Examples:
      | id | name  |
      | 1  | Alice |
      | 2  | Bob   |





package com.example.student;

public class Student {
    private String id;
    private String name;

    public Student(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}











